{"ast":null,"code":"var _jsxFileName = \"/Users/justin/Documents/Work/my_app/src/InstructorAttendance.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\nimport QRCode from \"qrcode\";\n// import \"./App.css\"; // Make sure to import the CSS file\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction InstructorAttendance() {\n  _s();\n  const navigate = useNavigate();\n  const qrRef = useRef();\n  const [qrCodes, setQrCodes] = useState([]);\n  const [currentQrIndex, setCurrentQrIndex] = useState(0);\n\n  // Function to generate a random 50 character string\n  const SessionID = (length = 50) => {\n    let result = \"\";\n    while (result.length < length) {\n      result += Math.random().toString(36).substring(2);\n    }\n    return \"<\" + result.substring(0, length) + \">\" + \"_zkp\";\n  };\n\n  // Generate 60 random QR codes\n  useEffect(() => {\n    const qrArray = [];\n    for (let i = 0; i < 60; i++) {\n      qrArray.push(SessionID());\n    }\n    setQrCodes(qrArray);\n  }, []);\n  console.log(qrCodes);\n\n  // Update the QR code canvas\n  useEffect(() => {\n    if (qrRef.current && qrCodes.length > 0) {\n      const canvas = qrRef.current;\n      const size = Math.min(window.innerWidth, window.innerHeight);\n      canvas.width = size;\n      canvas.height = size;\n      QRCode.toCanvas(canvas, qrCodes[currentQrIndex], {\n        width: size,\n        height: size,\n        colorDark: \"#000000\",\n        colorLight: \"#ffffff\",\n        errorCorrectionLevel: \"H\"\n      }, error => {\n        if (error) console.error(error);\n      });\n    }\n  }, [currentQrIndex, qrCodes]);\n\n  // Loop through the QR codes every 2 seconds\n  useEffect(() => {\n    const interval = setInterval(() => {\n      setCurrentQrIndex(prevIndex => (prevIndex + 1) % qrCodes.length);\n    }, 2000);\n    return () => clearInterval(interval);\n  }, [qrCodes]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"InstructorAttendance\",\n    children: [/*#__PURE__*/_jsxDEV(\"canvas\", {\n      id: \"qrcode\",\n      ref: qrRef\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"counter\",\n      children: [currentQrIndex + 1, \" / 60\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"button-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"InstructorAttendance_Done\",\n        onClick: () => navigate(\"/InstructorHome\"),\n        children: \"Cancel\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"InstructorAttendance_Finish\",\n        onClick: () => navigate(\"/InstructorDone\"),\n        children: \"Finish\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 66,\n    columnNumber: 5\n  }, this);\n}\n_s(InstructorAttendance, \"SYJMuiwkwlQKiuqjFkvpRCz3qVk=\", false, function () {\n  return [useNavigate];\n});\n_c = InstructorAttendance;\nexport default InstructorAttendance;\n\n// // URL of the API endpoint -- code for pulling from a qr code\n// const apiUrl = \"http://10.100.178.140:5000/items\";\n\n// useEffect(() => {\n//   async function fetchData() {\n//     try {\n//       const response = await fetch(apiUrl);\n\n//       // Check if the request was successful\n//       if (!response.ok) {\n//         throw new Error(\"Network response was not ok \" + response.statusText);\n//       }\n\n//       // Parse the JSON from the response\n//       const data = await response.json();\n\n//       // Use the data to generate the QR code\n//       setText(JSON.stringify(data)); // Assuming data is an object; you may need to adjust this based on your API response\n//     } catch (error) {\n//       // Handle any errors\n//       console.error(\"There was a problem with the fetch operation:\", error);\n//     }\n//   }\n\n//   fetchData();\n// }, [apiUrl]);\nvar _c;\n$RefreshReg$(_c, \"InstructorAttendance\");","map":{"version":3,"names":["React","useState","useEffect","useRef","useNavigate","QRCode","jsxDEV","_jsxDEV","InstructorAttendance","_s","navigate","qrRef","qrCodes","setQrCodes","currentQrIndex","setCurrentQrIndex","SessionID","length","result","Math","random","toString","substring","qrArray","i","push","console","log","current","canvas","size","min","window","innerWidth","innerHeight","width","height","toCanvas","colorDark","colorLight","errorCorrectionLevel","error","interval","setInterval","prevIndex","clearInterval","className","children","id","ref","fileName","_jsxFileName","lineNumber","columnNumber","onClick","_c","$RefreshReg$"],"sources":["/Users/justin/Documents/Work/my_app/src/InstructorAttendance.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\nimport QRCode from \"qrcode\";\n// import \"./App.css\"; // Make sure to import the CSS file\n\nfunction InstructorAttendance() {\n  const navigate = useNavigate();\n  const qrRef = useRef();\n  const [qrCodes, setQrCodes] = useState([]);\n  const [currentQrIndex, setCurrentQrIndex] = useState(0);\n\n  // Function to generate a random 50 character string\n  const SessionID = (length = 50) => {\n    let result = \"\";\n    while (result.length < length) {\n      result += Math.random().toString(36).substring(2);\n    }\n    return \"<\" + result.substring(0, length) + \">\" + \"_zkp\";\n  };\n\n  // Generate 60 random QR codes\n  useEffect(() => {\n    const qrArray = [];\n    for (let i = 0; i < 60; i++) {\n      qrArray.push(SessionID());\n    }\n    setQrCodes(qrArray);\n  }, []);\n\n  console.log(qrCodes);\n\n  // Update the QR code canvas\n  useEffect(() => {\n    if (qrRef.current && qrCodes.length > 0) {\n      const canvas = qrRef.current;\n      const size = Math.min(window.innerWidth, window.innerHeight);\n      canvas.width = size;\n      canvas.height = size;\n\n      QRCode.toCanvas(\n        canvas,\n        qrCodes[currentQrIndex],\n        {\n          width: size,\n          height: size,\n          colorDark: \"#000000\",\n          colorLight: \"#ffffff\",\n          errorCorrectionLevel: \"H\",\n        },\n        (error) => {\n          if (error) console.error(error);\n        }\n      );\n    }\n  }, [currentQrIndex, qrCodes]);\n\n  // Loop through the QR codes every 2 seconds\n  useEffect(() => {\n    const interval = setInterval(() => {\n      setCurrentQrIndex((prevIndex) => (prevIndex + 1) % qrCodes.length);\n    }, 2000);\n    return () => clearInterval(interval);\n  }, [qrCodes]);\n\n  return (\n    <div className=\"InstructorAttendance\">\n      <canvas id=\"qrcode\" ref={qrRef}></canvas>\n      <div className=\"counter\">{currentQrIndex + 1} / 60</div>\n      <div className=\"button-container\">\n        <button\n          className=\"InstructorAttendance_Done\"\n          onClick={() => navigate(\"/InstructorHome\")}\n        >\n          Cancel\n        </button>\n        <button\n          className=\"InstructorAttendance_Finish\"\n          onClick={() => navigate(\"/InstructorDone\")}\n        >\n          Finish\n        </button>\n      </div>\n    </div>\n  );\n}\n\nexport default InstructorAttendance;\n\n// // URL of the API endpoint -- code for pulling from a qr code\n// const apiUrl = \"http://10.100.178.140:5000/items\";\n\n// useEffect(() => {\n//   async function fetchData() {\n//     try {\n//       const response = await fetch(apiUrl);\n\n//       // Check if the request was successful\n//       if (!response.ok) {\n//         throw new Error(\"Network response was not ok \" + response.statusText);\n//       }\n\n//       // Parse the JSON from the response\n//       const data = await response.json();\n\n//       // Use the data to generate the QR code\n//       setText(JSON.stringify(data)); // Assuming data is an object; you may need to adjust this based on your API response\n//     } catch (error) {\n//       // Handle any errors\n//       console.error(\"There was a problem with the fetch operation:\", error);\n//     }\n//   }\n\n//   fetchData();\n// }, [apiUrl]);\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,EAAEC,MAAM,QAAQ,OAAO;AAC1D,SAASC,WAAW,QAAQ,kBAAkB;AAC9C,OAAOC,MAAM,MAAM,QAAQ;AAC3B;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAEA,SAASC,oBAAoBA,CAAA,EAAG;EAAAC,EAAA;EAC9B,MAAMC,QAAQ,GAAGN,WAAW,CAAC,CAAC;EAC9B,MAAMO,KAAK,GAAGR,MAAM,CAAC,CAAC;EACtB,MAAM,CAACS,OAAO,EAAEC,UAAU,CAAC,GAAGZ,QAAQ,CAAC,EAAE,CAAC;EAC1C,MAAM,CAACa,cAAc,EAAEC,iBAAiB,CAAC,GAAGd,QAAQ,CAAC,CAAC,CAAC;;EAEvD;EACA,MAAMe,SAAS,GAAGA,CAACC,MAAM,GAAG,EAAE,KAAK;IACjC,IAAIC,MAAM,GAAG,EAAE;IACf,OAAOA,MAAM,CAACD,MAAM,GAAGA,MAAM,EAAE;MAC7BC,MAAM,IAAIC,IAAI,CAACC,MAAM,CAAC,CAAC,CAACC,QAAQ,CAAC,EAAE,CAAC,CAACC,SAAS,CAAC,CAAC,CAAC;IACnD;IACA,OAAO,GAAG,GAAGJ,MAAM,CAACI,SAAS,CAAC,CAAC,EAAEL,MAAM,CAAC,GAAG,GAAG,GAAG,MAAM;EACzD,CAAC;;EAED;EACAf,SAAS,CAAC,MAAM;IACd,MAAMqB,OAAO,GAAG,EAAE;IAClB,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,EAAE,EAAEA,CAAC,EAAE,EAAE;MAC3BD,OAAO,CAACE,IAAI,CAACT,SAAS,CAAC,CAAC,CAAC;IAC3B;IACAH,UAAU,CAACU,OAAO,CAAC;EACrB,CAAC,EAAE,EAAE,CAAC;EAENG,OAAO,CAACC,GAAG,CAACf,OAAO,CAAC;;EAEpB;EACAV,SAAS,CAAC,MAAM;IACd,IAAIS,KAAK,CAACiB,OAAO,IAAIhB,OAAO,CAACK,MAAM,GAAG,CAAC,EAAE;MACvC,MAAMY,MAAM,GAAGlB,KAAK,CAACiB,OAAO;MAC5B,MAAME,IAAI,GAAGX,IAAI,CAACY,GAAG,CAACC,MAAM,CAACC,UAAU,EAAED,MAAM,CAACE,WAAW,CAAC;MAC5DL,MAAM,CAACM,KAAK,GAAGL,IAAI;MACnBD,MAAM,CAACO,MAAM,GAAGN,IAAI;MAEpBzB,MAAM,CAACgC,QAAQ,CACbR,MAAM,EACNjB,OAAO,CAACE,cAAc,CAAC,EACvB;QACEqB,KAAK,EAAEL,IAAI;QACXM,MAAM,EAAEN,IAAI;QACZQ,SAAS,EAAE,SAAS;QACpBC,UAAU,EAAE,SAAS;QACrBC,oBAAoB,EAAE;MACxB,CAAC,EACAC,KAAK,IAAK;QACT,IAAIA,KAAK,EAAEf,OAAO,CAACe,KAAK,CAACA,KAAK,CAAC;MACjC,CACF,CAAC;IACH;EACF,CAAC,EAAE,CAAC3B,cAAc,EAAEF,OAAO,CAAC,CAAC;;EAE7B;EACAV,SAAS,CAAC,MAAM;IACd,MAAMwC,QAAQ,GAAGC,WAAW,CAAC,MAAM;MACjC5B,iBAAiB,CAAE6B,SAAS,IAAK,CAACA,SAAS,GAAG,CAAC,IAAIhC,OAAO,CAACK,MAAM,CAAC;IACpE,CAAC,EAAE,IAAI,CAAC;IACR,OAAO,MAAM4B,aAAa,CAACH,QAAQ,CAAC;EACtC,CAAC,EAAE,CAAC9B,OAAO,CAAC,CAAC;EAEb,oBACEL,OAAA;IAAKuC,SAAS,EAAC,sBAAsB;IAAAC,QAAA,gBACnCxC,OAAA;MAAQyC,EAAE,EAAC,QAAQ;MAACC,GAAG,EAAEtC;IAAM;MAAAuC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAS,CAAC,eACzC9C,OAAA;MAAKuC,SAAS,EAAC,SAAS;MAAAC,QAAA,GAAEjC,cAAc,GAAG,CAAC,EAAC,OAAK;IAAA;MAAAoC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAK,CAAC,eACxD9C,OAAA;MAAKuC,SAAS,EAAC,kBAAkB;MAAAC,QAAA,gBAC/BxC,OAAA;QACEuC,SAAS,EAAC,2BAA2B;QACrCQ,OAAO,EAAEA,CAAA,KAAM5C,QAAQ,CAAC,iBAAiB,CAAE;QAAAqC,QAAA,EAC5C;MAED;QAAAG,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC,eACT9C,OAAA;QACEuC,SAAS,EAAC,6BAA6B;QACvCQ,OAAO,EAAEA,CAAA,KAAM5C,QAAQ,CAAC,iBAAiB,CAAE;QAAAqC,QAAA,EAC5C;MAED;QAAAG,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACN,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACH,CAAC;AAEV;AAAC5C,EAAA,CA/EQD,oBAAoB;EAAA,QACVJ,WAAW;AAAA;AAAAmD,EAAA,GADrB/C,oBAAoB;AAiF7B,eAAeA,oBAAoB;;AAEnC;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AAAA,IAAA+C,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}