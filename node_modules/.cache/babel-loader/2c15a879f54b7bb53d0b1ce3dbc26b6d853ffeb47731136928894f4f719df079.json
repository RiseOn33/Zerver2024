{"ast":null,"code":"var _jsxFileName = \"/Users/justin/Documents/Work/my_app/src/InstructorAttendance.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\nimport QRCode from \"qrcode\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction InstructorAttendance() {\n  _s();\n  const navigate = useNavigate();\n  const [text, setText] = useState(\"\");\n  const qrRef = useRef();\n\n  // URL of the API endpoint\n  const apiUrl = \"http://10.100.178.140:5000/items\";\n  useEffect(() => {\n    async function fetchData() {\n      try {\n        const response = await fetch(apiUrl);\n\n        // Check if the request was successful\n        if (!response.ok) {\n          throw new Error(\"Network response was not ok \" + response.statusText);\n        }\n\n        // Parse the JSON from the response\n        const data = await response.json();\n\n        // Use the data to generate the QR code\n        setText(JSON.stringify(data)); // Assuming data is an object; you may need to adjust this based on your API response\n      } catch (error) {\n        // Handle any errors\n        console.error(\"There was a problem with the fetch operation:\", error);\n      }\n    }\n    fetchData();\n  }, [apiUrl]);\n  useEffect(() => {\n    if (qrRef.current && text) {\n      const canvas = qrRef.current;\n      QRCode.toCanvas(canvas, text, {\n        colorDark: \"#000000\",\n        colorLight: \"#ffffff\",\n        correctLevel: QRCode.CorrectLevel.H\n      }, error => {\n        if (error) console.error(error);\n      });\n    }\n  }, [text]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"InstructorAttendance\",\n    children: [/*#__PURE__*/_jsxDEV(\"canvas\", {\n      id: \"qrcode\",\n      ref: qrRef\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"button-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"InstructorAttendance_Done\",\n        onClick: () => navigate(\"/InstructorHome\"),\n        children: \"Cancel\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"InstructorAttendance_Finish\",\n        onClick: () => navigate(\"/InstructorDone\"),\n        children: \"Finish\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 56,\n    columnNumber: 5\n  }, this);\n}\n_s(InstructorAttendance, \"Bl7PtzwR/rBNVDvHVT0GZQ3U49w=\", false, function () {\n  return [useNavigate];\n});\n_c = InstructorAttendance;\nexport default InstructorAttendance;\nvar _c;\n$RefreshReg$(_c, \"InstructorAttendance\");","map":{"version":3,"names":["React","useState","useEffect","useRef","useNavigate","QRCode","jsxDEV","_jsxDEV","InstructorAttendance","_s","navigate","text","setText","qrRef","apiUrl","fetchData","response","fetch","ok","Error","statusText","data","json","JSON","stringify","error","console","current","canvas","toCanvas","colorDark","colorLight","correctLevel","CorrectLevel","H","className","children","id","ref","fileName","_jsxFileName","lineNumber","columnNumber","onClick","_c","$RefreshReg$"],"sources":["/Users/justin/Documents/Work/my_app/src/InstructorAttendance.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\nimport QRCode from \"qrcode\";\n\nfunction InstructorAttendance() {\n  const navigate = useNavigate();\n  const [text, setText] = useState(\"\");\n  const qrRef = useRef();\n\n  // URL of the API endpoint\n  const apiUrl = \"http://10.100.178.140:5000/items\";\n\n  useEffect(() => {\n    async function fetchData() {\n      try {\n        const response = await fetch(apiUrl);\n\n        // Check if the request was successful\n        if (!response.ok) {\n          throw new Error(\"Network response was not ok \" + response.statusText);\n        }\n\n        // Parse the JSON from the response\n        const data = await response.json();\n\n        // Use the data to generate the QR code\n        setText(JSON.stringify(data)); // Assuming data is an object; you may need to adjust this based on your API response\n      } catch (error) {\n        // Handle any errors\n        console.error(\"There was a problem with the fetch operation:\", error);\n      }\n    }\n\n    fetchData();\n  }, [apiUrl]);\n\n  useEffect(() => {\n    if (qrRef.current && text) {\n      const canvas = qrRef.current;\n      QRCode.toCanvas(\n        canvas,\n        text,\n        {\n          colorDark: \"#000000\",\n          colorLight: \"#ffffff\",\n          correctLevel: QRCode.CorrectLevel.H,\n        },\n        (error) => {\n          if (error) console.error(error);\n        }\n      );\n    }\n  }, [text]);\n\n  return (\n    <div className=\"InstructorAttendance\">\n      <canvas id=\"qrcode\" ref={qrRef}></canvas>\n      <div className=\"button-container\">\n        <button\n          className=\"InstructorAttendance_Done\"\n          onClick={() => navigate(\"/InstructorHome\")}\n        >\n          Cancel\n        </button>\n        <button\n          className=\"InstructorAttendance_Finish\"\n          onClick={() => navigate(\"/InstructorDone\")}\n        >\n          Finish\n        </button>\n      </div>\n    </div>\n  );\n}\n\nexport default InstructorAttendance;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}