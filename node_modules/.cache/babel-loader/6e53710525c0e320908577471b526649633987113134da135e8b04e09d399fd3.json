{"ast":null,"code":"var _jsxFileName = \"/Users/justin/Desktop/Work/Zerver/my_app/src/StudentHome.js\",\n  _s = $RefreshSig$();\n// import React, { useRef, useState, useEffect } from \"react\";\n// import Webcam from \"react-webcam\";\n// import jsQR from \"jsqr\";\n\n// function StudentHome() {\n//   const webcamRef = useRef(null);\n//   const [scanResults, setScanResults] = useState([]);\n\n//   useEffect(() => {\n//     const interval = setInterval(() => {\n//       capture();\n//     }, 1000); // continuously capture every 1000 milliseconds (1 second)\n\n//     return () => clearInterval(interval); // Clear the interval when the component unmounts\n//   }, []);\n\n//   const capture = () => {\n//     const imageSrc = webcamRef.current.getScreenshot();\n//     if (imageSrc) {\n//       const code = decodeQRFromImage(imageSrc);\n//       if (code) {\n//         // add new result to the scan results array only when a QR code is detected\n//         setScanResults((prevResults) => [\n//           ...prevResults,\n//           `QR Code Detected: ${code.data}`,\n//         ]);\n//       }\n//     }\n//   };\n\n//   const decodeQRFromImage = (imageSrc) => {\n//     const canvas = document.createElement(\"canvas\");\n//     const ctx = canvas.getContext(\"2d\");\n//     const image = new Image();\n//     image.src = imageSrc;\n//     image.onload = () => {\n//       canvas.width = image.width;\n//       canvas.height = image.height;\n//       ctx.drawImage(image, 0, 0, canvas.width, canvas.height);\n//       const imageData = ctx.getImageData(0, 0, canvas.width, canvas.height);\n//       return jsQR(imageData.data, imageData.width, imageData.height, {\n//         inversionAttempts: \"dontInvert\",\n//       });\n//     };\n//   };\n\n//   return (\n//     <div style={{ position: \"relative\" }}>\n//       <Webcam\n//         className=\"webcam\"\n//         audio={false}\n//         ref={webcamRef}\n//         screenshotFormat=\"image/jpeg\"\n//         videoConstraints={{\n//           facingMode:\n//             window.innerWidth < 768 ? { exact: \"environment\" } : \"user\",\n//         }}\n//       />\n//       <div>\n//         {scanResults.map((result, index) => (\n//           <p key={index}>{result}</p> // display successful QR code detection\n//         ))}\n//       </div>\n//     </div>\n//   );\n// }\n\n// export default StudentHome;\n\nimport { useRef, useState, useEffect } from \"react\";\nimport Webcam from \"react-webcam\";\nimport jsQR from \"jsqr\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction StudentHome() {\n  _s();\n  const webcamRef = useRef(null);\n  const [scanResults, setScanResults] = useState([]);\n  const [cameraError, setCameraError] = useState(null);\n  useEffect(() => {\n    const interval = setInterval(() => {\n      capture();\n    }, 1000); // Continuously capture every 1000 milliseconds (1 second)\n    return () => clearInterval(interval); // Clear the interval when the component unmounts\n  }, []);\n  const capture = () => {\n    const imageSrc = webcamRef.current.getScreenshot();\n    if (imageSrc) {\n      decodeQRFromImage(imageSrc);\n    }\n  };\n  const decodeQRFromImage = imageSrc => {\n    const canvas = document.createElement(\"canvas\");\n    const ctx = canvas.getContext(\"2d\");\n    const image = new Image();\n    image.src = imageSrc;\n    image.onload = () => {\n      canvas.width = image.width;\n      canvas.height = image.height;\n      ctx.drawImage(image, 0, 0, canvas.width, canvas.height);\n      const imageData = ctx.getImageData(0, 0, canvas.width, canvas.height);\n      const code = jsQR(imageData.data, imageData.width, imageData.height, {\n        inversionAttempts: \"dontInvert\"\n      });\n      if (code) {\n        setScanResults(prevResults => [...prevResults, `QR Code Detected: ${code.data}`]);\n      }\n    };\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      position: \"relative\"\n    },\n    children: [/*#__PURE__*/_jsxDEV(Webcam, {\n      className: \"webcam\",\n      audio: false,\n      ref: webcamRef,\n      screenshotFormat: \"image/jpeg\",\n      onUserMediaError: e => setCameraError(\"Error accessing the camera: \" + e.message),\n      videoConstraints: {\n        facingMode: window.innerWidth < 768 ? {\n          exact: \"environment\"\n        } : \"user\"\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 7\n    }, this), cameraError && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"error\",\n      children: cameraError\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 23\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: scanResults.map((result, index) => /*#__PURE__*/_jsxDEV(\"p\", {\n        children: result\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 133,\n        columnNumber: 11\n      }, this) // Display successful QR code detection\n      )\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 116,\n    columnNumber: 5\n  }, this);\n}\n_s(StudentHome, \"4c2viJdsEA+Og5WhS3Gwh/iSImY=\");\n_c = StudentHome;\nexport default StudentHome;\nvar _c;\n$RefreshReg$(_c, \"StudentHome\");","map":{"version":3,"names":["useRef","useState","useEffect","Webcam","jsQR","jsxDEV","_jsxDEV","StudentHome","_s","webcamRef","scanResults","setScanResults","cameraError","setCameraError","interval","setInterval","capture","clearInterval","imageSrc","current","getScreenshot","decodeQRFromImage","canvas","document","createElement","ctx","getContext","image","Image","src","onload","width","height","drawImage","imageData","getImageData","code","data","inversionAttempts","prevResults","style","position","children","className","audio","ref","screenshotFormat","onUserMediaError","e","message","videoConstraints","facingMode","window","innerWidth","exact","fileName","_jsxFileName","lineNumber","columnNumber","map","result","index","_c","$RefreshReg$"],"sources":["/Users/justin/Desktop/Work/Zerver/my_app/src/StudentHome.js"],"sourcesContent":["// import React, { useRef, useState, useEffect } from \"react\";\n// import Webcam from \"react-webcam\";\n// import jsQR from \"jsqr\";\n\n// function StudentHome() {\n//   const webcamRef = useRef(null);\n//   const [scanResults, setScanResults] = useState([]);\n\n//   useEffect(() => {\n//     const interval = setInterval(() => {\n//       capture();\n//     }, 1000); // continuously capture every 1000 milliseconds (1 second)\n\n//     return () => clearInterval(interval); // Clear the interval when the component unmounts\n//   }, []);\n\n//   const capture = () => {\n//     const imageSrc = webcamRef.current.getScreenshot();\n//     if (imageSrc) {\n//       const code = decodeQRFromImage(imageSrc);\n//       if (code) {\n//         // add new result to the scan results array only when a QR code is detected\n//         setScanResults((prevResults) => [\n//           ...prevResults,\n//           `QR Code Detected: ${code.data}`,\n//         ]);\n//       }\n//     }\n//   };\n\n//   const decodeQRFromImage = (imageSrc) => {\n//     const canvas = document.createElement(\"canvas\");\n//     const ctx = canvas.getContext(\"2d\");\n//     const image = new Image();\n//     image.src = imageSrc;\n//     image.onload = () => {\n//       canvas.width = image.width;\n//       canvas.height = image.height;\n//       ctx.drawImage(image, 0, 0, canvas.width, canvas.height);\n//       const imageData = ctx.getImageData(0, 0, canvas.width, canvas.height);\n//       return jsQR(imageData.data, imageData.width, imageData.height, {\n//         inversionAttempts: \"dontInvert\",\n//       });\n//     };\n//   };\n\n//   return (\n//     <div style={{ position: \"relative\" }}>\n//       <Webcam\n//         className=\"webcam\"\n//         audio={false}\n//         ref={webcamRef}\n//         screenshotFormat=\"image/jpeg\"\n//         videoConstraints={{\n//           facingMode:\n//             window.innerWidth < 768 ? { exact: \"environment\" } : \"user\",\n//         }}\n//       />\n//       <div>\n//         {scanResults.map((result, index) => (\n//           <p key={index}>{result}</p> // display successful QR code detection\n//         ))}\n//       </div>\n//     </div>\n//   );\n// }\n\n// export default StudentHome;\n\nimport { useRef, useState, useEffect } from \"react\";\nimport Webcam from \"react-webcam\";\nimport jsQR from \"jsqr\";\n\nfunction StudentHome() {\n  const webcamRef = useRef(null);\n  const [scanResults, setScanResults] = useState([]);\n  const [cameraError, setCameraError] = useState(null);\n\n  useEffect(() => {\n    const interval = setInterval(() => {\n      capture();\n    }, 1000); // Continuously capture every 1000 milliseconds (1 second)\n    return () => clearInterval(interval); // Clear the interval when the component unmounts\n  }, []);\n\n  const capture = () => {\n    const imageSrc = webcamRef.current.getScreenshot();\n    if (imageSrc) {\n      decodeQRFromImage(imageSrc);\n    }\n  };\n\n  const decodeQRFromImage = (imageSrc) => {\n    const canvas = document.createElement(\"canvas\");\n    const ctx = canvas.getContext(\"2d\");\n    const image = new Image();\n    image.src = imageSrc;\n    image.onload = () => {\n      canvas.width = image.width;\n      canvas.height = image.height;\n      ctx.drawImage(image, 0, 0, canvas.width, canvas.height);\n      const imageData = ctx.getImageData(0, 0, canvas.width, canvas.height);\n      const code = jsQR(imageData.data, imageData.width, imageData.height, {\n        inversionAttempts: \"dontInvert\",\n      });\n      if (code) {\n        setScanResults((prevResults) => [\n          ...prevResults,\n          `QR Code Detected: ${code.data}`,\n        ]);\n      }\n    };\n  };\n\n  return (\n    <div style={{ position: \"relative\" }}>\n      <Webcam\n        className=\"webcam\"\n        audio={false}\n        ref={webcamRef}\n        screenshotFormat=\"image/jpeg\"\n        onUserMediaError={(e) =>\n          setCameraError(\"Error accessing the camera: \" + e.message)\n        }\n        videoConstraints={{\n          facingMode:\n            window.innerWidth < 768 ? { exact: \"environment\" } : \"user\",\n        }}\n      />\n      {cameraError && <div className=\"error\">{cameraError}</div>}\n      <div>\n        {scanResults.map((result, index) => (\n          <p key={index}>{result}</p> // Display successful QR code detection\n        ))}\n      </div>\n    </div>\n  );\n}\n\nexport default StudentHome;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}