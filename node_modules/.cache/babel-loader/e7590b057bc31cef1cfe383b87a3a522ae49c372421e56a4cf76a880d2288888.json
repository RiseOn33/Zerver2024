{"ast":null,"code":"var _jsxFileName = \"/Users/justin/Desktop/Work/Zerver/my_app/src/StudentHome.js\",\n  _s = $RefreshSig$();\n// import React, { useRef, useState } from \"react\";\n// import Webcam from \"react-webcam\";\n// import { Button } from \"@mui/material\";\n// import jsQR from \"jsqr\";\n// import \"./App.css\";\n\n// function StudentHome() {\n//   const webcamRef = useRef(null);\n//   const [img, setImg] = useState(null);\n//   const [qrCodeText, setQrCodeText] = useState(\"\");\n\n//   const capture = () => {\n//     // take screenshot\n//     const imageSrc = webcamRef.current.getScreenshot();\n//     setImg(imageSrc);\n\n//     if (imageSrc) {\n//       // find qr code\n//       const code = decodeQRFromImage(imageSrc);\n//       if (code) {\n//         setQrCodeText(code.data);\n//       } else {\n//         setQrCodeText(\"No QR code detected.\");\n//       }\n//     }\n//   };\n//   // qr code recognition\n//   const decodeQRFromImage = (imageSrc) => {\n//     const canvas = document.createElement(\"canvas\");\n//     const ctx = canvas.getContext(\"2d\");\n//     const image = new Image();\n//     image.src = imageSrc;\n//     image.onload = () => {\n//       canvas.width = image.width;\n//       canvas.height = image.height;\n//       ctx.drawImage(image, 0, 0, canvas.width, canvas.height);\n//       const imageData = ctx.getImageData(0, 0, canvas.width, canvas.height);\n//       const code = jsQR(imageData.data, imageData.width, imageData.height, {\n//         inversionAttempts: \"dontInvert\",\n//       });\n//       return code;\n//     };\n//   };\n\n//   return (\n//     //webcam & button establishing\n//     <div style={{ position: \"relative\" }}>\n//       <Webcam\n//         className=\"webcam\"\n//         audio={false}\n//         ref={webcamRef}\n//         screenshotFormat=\"image/jpeg\"\n//       />\n//       <Button variant=\"contained\" onClick={capture}>\n//         I'm Here\n//       </Button>\n//       {img && <img src={img} alt=\"Webcam Capture\" />}\n//       {qrCodeText && <p>{qrCodeText}</p>}\n//     </div>\n//   );\n// }\n\n// export default StudentHome;\n\nimport React, { useRef, useState, useEffect } from \"react\";\nimport Webcam from \"react-webcam\";\nimport jsQR from \"jsqr\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction StudentHome() {\n  _s();\n  const webcamRef = useRef(null);\n  const [qrCodeText, setQrCodeText] = useState(\"\");\n  useEffect(() => {\n    const interval = setInterval(() => {\n      capture();\n    }, 1000); // Set to capture every 1000 milliseconds (1 second)\n\n    return () => clearInterval(interval); // Clear the interval when the component unmounts\n  }, []);\n  const capture = () => {\n    const imageSrc = webcamRef.current.getScreenshot();\n    if (imageSrc) {\n      const code = decodeQRFromImage(imageSrc);\n      if (code) {\n        setQrCodeText(code.data);\n      } else {\n        setQrCodeText(\"No QR code detected.\");\n      }\n    }\n  };\n  const decodeQRFromImage = imageSrc => {\n    const canvas = document.createElement(\"canvas\");\n    const ctx = canvas.getContext(\"2d\");\n    const image = new Image();\n    image.src = imageSrc;\n    image.onload = () => {\n      canvas.width = image.width;\n      canvas.height = image.height;\n      ctx.drawImage(image, 0, 0, canvas.width, canvas.height);\n      const imageData = ctx.getImageData(0, 0, canvas.width, canvas.height);\n      const code = jsQR(imageData.data, imageData.width, imageData.height, {\n        inversionAttempts: \"dontInvert\"\n      });\n      return code;\n    };\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      position: \"relative\"\n    },\n    children: [/*#__PURE__*/_jsxDEV(Webcam, {\n      className: \"webcam\",\n      audio: false,\n      ref: webcamRef,\n      screenshotFormat: \"image/jpeg\",\n      style: {\n        transform: \"scaleX(-1)\"\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"webcam-overlay\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 7\n    }, this), qrCodeText && /*#__PURE__*/_jsxDEV(\"p\", {\n      children: qrCodeText\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 22\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 112,\n    columnNumber: 5\n  }, this);\n}\n_s(StudentHome, \"066a3fpu7Z7KJTO+Xu44iV0vHds=\");\n_c = StudentHome;\nexport default StudentHome;\nvar _c;\n$RefreshReg$(_c, \"StudentHome\");","map":{"version":3,"names":["React","useRef","useState","useEffect","Webcam","jsQR","jsxDEV","_jsxDEV","StudentHome","_s","webcamRef","qrCodeText","setQrCodeText","interval","setInterval","capture","clearInterval","imageSrc","current","getScreenshot","code","decodeQRFromImage","data","canvas","document","createElement","ctx","getContext","image","Image","src","onload","width","height","drawImage","imageData","getImageData","inversionAttempts","style","position","children","className","audio","ref","screenshotFormat","transform","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/justin/Desktop/Work/Zerver/my_app/src/StudentHome.js"],"sourcesContent":["// import React, { useRef, useState } from \"react\";\n// import Webcam from \"react-webcam\";\n// import { Button } from \"@mui/material\";\n// import jsQR from \"jsqr\";\n// import \"./App.css\";\n\n// function StudentHome() {\n//   const webcamRef = useRef(null);\n//   const [img, setImg] = useState(null);\n//   const [qrCodeText, setQrCodeText] = useState(\"\");\n\n//   const capture = () => {\n//     // take screenshot\n//     const imageSrc = webcamRef.current.getScreenshot();\n//     setImg(imageSrc);\n\n//     if (imageSrc) {\n//       // find qr code\n//       const code = decodeQRFromImage(imageSrc);\n//       if (code) {\n//         setQrCodeText(code.data);\n//       } else {\n//         setQrCodeText(\"No QR code detected.\");\n//       }\n//     }\n//   };\n//   // qr code recognition\n//   const decodeQRFromImage = (imageSrc) => {\n//     const canvas = document.createElement(\"canvas\");\n//     const ctx = canvas.getContext(\"2d\");\n//     const image = new Image();\n//     image.src = imageSrc;\n//     image.onload = () => {\n//       canvas.width = image.width;\n//       canvas.height = image.height;\n//       ctx.drawImage(image, 0, 0, canvas.width, canvas.height);\n//       const imageData = ctx.getImageData(0, 0, canvas.width, canvas.height);\n//       const code = jsQR(imageData.data, imageData.width, imageData.height, {\n//         inversionAttempts: \"dontInvert\",\n//       });\n//       return code;\n//     };\n//   };\n\n//   return (\n//     //webcam & button establishing\n//     <div style={{ position: \"relative\" }}>\n//       <Webcam\n//         className=\"webcam\"\n//         audio={false}\n//         ref={webcamRef}\n//         screenshotFormat=\"image/jpeg\"\n//       />\n//       <Button variant=\"contained\" onClick={capture}>\n//         I'm Here\n//       </Button>\n//       {img && <img src={img} alt=\"Webcam Capture\" />}\n//       {qrCodeText && <p>{qrCodeText}</p>}\n//     </div>\n//   );\n// }\n\n// export default StudentHome;\n\nimport React, { useRef, useState, useEffect } from \"react\";\nimport Webcam from \"react-webcam\";\nimport jsQR from \"jsqr\";\n\nfunction StudentHome() {\n  const webcamRef = useRef(null);\n  const [qrCodeText, setQrCodeText] = useState(\"\");\n\n  useEffect(() => {\n    const interval = setInterval(() => {\n      capture();\n    }, 1000); // Set to capture every 1000 milliseconds (1 second)\n\n    return () => clearInterval(interval); // Clear the interval when the component unmounts\n  }, []);\n\n  const capture = () => {\n    const imageSrc = webcamRef.current.getScreenshot();\n\n    if (imageSrc) {\n      const code = decodeQRFromImage(imageSrc);\n      if (code) {\n        setQrCodeText(code.data);\n      } else {\n        setQrCodeText(\"No QR code detected.\");\n      }\n    }\n  };\n\n  const decodeQRFromImage = (imageSrc) => {\n    const canvas = document.createElement(\"canvas\");\n    const ctx = canvas.getContext(\"2d\");\n    const image = new Image();\n    image.src = imageSrc;\n    image.onload = () => {\n      canvas.width = image.width;\n      canvas.height = image.height;\n      ctx.drawImage(image, 0, 0, canvas.width, canvas.height);\n      const imageData = ctx.getImageData(0, 0, canvas.width, canvas.height);\n      const code = jsQR(imageData.data, imageData.width, imageData.height, {\n        inversionAttempts: \"dontInvert\",\n      });\n      return code;\n    };\n  };\n\n  return (\n    <div style={{ position: \"relative\" }}>\n      <Webcam\n        className=\"webcam\"\n        audio={false}\n        ref={webcamRef}\n        screenshotFormat=\"image/jpeg\"\n        style={{ transform: \"scaleX(-1)\" }}\n      />\n      <div className=\"webcam-overlay\" />\n      {qrCodeText && <p>{qrCodeText}</p>}\n    </div>\n  );\n}\n\nexport default StudentHome;\n"],"mappings":";;AAAA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA,OAAOA,KAAK,IAAIC,MAAM,EAAEC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAC1D,OAAOC,MAAM,MAAM,cAAc;AACjC,OAAOC,IAAI,MAAM,MAAM;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAExB,SAASC,WAAWA,CAAA,EAAG;EAAAC,EAAA;EACrB,MAAMC,SAAS,GAAGT,MAAM,CAAC,IAAI,CAAC;EAC9B,MAAM,CAACU,UAAU,EAAEC,aAAa,CAAC,GAAGV,QAAQ,CAAC,EAAE,CAAC;EAEhDC,SAAS,CAAC,MAAM;IACd,MAAMU,QAAQ,GAAGC,WAAW,CAAC,MAAM;MACjCC,OAAO,CAAC,CAAC;IACX,CAAC,EAAE,IAAI,CAAC,CAAC,CAAC;;IAEV,OAAO,MAAMC,aAAa,CAACH,QAAQ,CAAC,CAAC,CAAC;EACxC,CAAC,EAAE,EAAE,CAAC;EAEN,MAAME,OAAO,GAAGA,CAAA,KAAM;IACpB,MAAME,QAAQ,GAAGP,SAAS,CAACQ,OAAO,CAACC,aAAa,CAAC,CAAC;IAElD,IAAIF,QAAQ,EAAE;MACZ,MAAMG,IAAI,GAAGC,iBAAiB,CAACJ,QAAQ,CAAC;MACxC,IAAIG,IAAI,EAAE;QACRR,aAAa,CAACQ,IAAI,CAACE,IAAI,CAAC;MAC1B,CAAC,MAAM;QACLV,aAAa,CAAC,sBAAsB,CAAC;MACvC;IACF;EACF,CAAC;EAED,MAAMS,iBAAiB,GAAIJ,QAAQ,IAAK;IACtC,MAAMM,MAAM,GAAGC,QAAQ,CAACC,aAAa,CAAC,QAAQ,CAAC;IAC/C,MAAMC,GAAG,GAAGH,MAAM,CAACI,UAAU,CAAC,IAAI,CAAC;IACnC,MAAMC,KAAK,GAAG,IAAIC,KAAK,CAAC,CAAC;IACzBD,KAAK,CAACE,GAAG,GAAGb,QAAQ;IACpBW,KAAK,CAACG,MAAM,GAAG,MAAM;MACnBR,MAAM,CAACS,KAAK,GAAGJ,KAAK,CAACI,KAAK;MAC1BT,MAAM,CAACU,MAAM,GAAGL,KAAK,CAACK,MAAM;MAC5BP,GAAG,CAACQ,SAAS,CAACN,KAAK,EAAE,CAAC,EAAE,CAAC,EAAEL,MAAM,CAACS,KAAK,EAAET,MAAM,CAACU,MAAM,CAAC;MACvD,MAAME,SAAS,GAAGT,GAAG,CAACU,YAAY,CAAC,CAAC,EAAE,CAAC,EAAEb,MAAM,CAACS,KAAK,EAAET,MAAM,CAACU,MAAM,CAAC;MACrE,MAAMb,IAAI,GAAGf,IAAI,CAAC8B,SAAS,CAACb,IAAI,EAAEa,SAAS,CAACH,KAAK,EAAEG,SAAS,CAACF,MAAM,EAAE;QACnEI,iBAAiB,EAAE;MACrB,CAAC,CAAC;MACF,OAAOjB,IAAI;IACb,CAAC;EACH,CAAC;EAED,oBACEb,OAAA;IAAK+B,KAAK,EAAE;MAAEC,QAAQ,EAAE;IAAW,CAAE;IAAAC,QAAA,gBACnCjC,OAAA,CAACH,MAAM;MACLqC,SAAS,EAAC,QAAQ;MAClBC,KAAK,EAAE,KAAM;MACbC,GAAG,EAAEjC,SAAU;MACfkC,gBAAgB,EAAC,YAAY;MAC7BN,KAAK,EAAE;QAAEO,SAAS,EAAE;MAAa;IAAE;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACpC,CAAC,eACF1C,OAAA;MAAKkC,SAAS,EAAC;IAAgB;MAAAK,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,EACjCtC,UAAU,iBAAIJ,OAAA;MAAAiC,QAAA,EAAI7B;IAAU;MAAAmC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAC/B,CAAC;AAEV;AAACxC,EAAA,CAvDQD,WAAW;AAAA0C,EAAA,GAAX1C,WAAW;AAyDpB,eAAeA,WAAW;AAAC,IAAA0C,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}