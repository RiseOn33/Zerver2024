{"ast":null,"code":"var _jsxFileName = \"/Users/justin/Desktop/Work/Zerver/my_app/src/StudentHome.js\",\n  _s = $RefreshSig$();\nimport React, { useRef, useState, useEffect } from \"react\";\nimport Webcam from \"react-webcam\";\nimport jsQR from \"jsqr\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction StudentHome() {\n  _s();\n  const webcamRef = useRef(null);\n  const [scanResults, setScanResults] = useState([]);\n  useEffect(() => {\n    const interval = setInterval(() => {\n      capture();\n    }, 1000); // continuously capture every 1000 milliseconds (1 second)\n\n    return () => clearInterval(interval); // Clear the interval when the component unmounts\n  }, []);\n  const capture = () => {\n    const imageSrc = webcamRef.current.getScreenshot();\n    if (imageSrc) {\n      const code = decodeQRFromImage(imageSrc);\n      if (code) {\n        // add new result to the scan results array only when a QR code is detected\n        setScanResults(prevResults => [...prevResults, `QR Code Detected: ${code.data}`]);\n      }\n    }\n  };\n  const decodeQRFromImage = imageSrc => {\n    const canvas = document.createElement(\"canvas\");\n    const ctx = canvas.getContext(\"2d\");\n    const image = new Image();\n    image.src = imageSrc;\n    image.onload = () => {\n      canvas.width = image.width;\n      canvas.height = image.height;\n      ctx.drawImage(image, 0, 0, canvas.width, canvas.height);\n      const imageData = ctx.getImageData(0, 0, canvas.width, canvas.height);\n      return jsQR(imageData.data, imageData.width, imageData.height, {\n        inversionAttempts: \"dontInvert\"\n      });\n    };\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      position: \"relative\"\n    },\n    children: [/*#__PURE__*/_jsxDEV(Webcam, {\n      className: \"webcam\",\n      audio: false,\n      ref: webcamRef,\n      screenshotFormat: \"image/jpeg\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: scanResults.map((result, index) => /*#__PURE__*/_jsxDEV(\"p\", {\n        children: result\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 11\n      }, this) // display successful QR code detection\n      )\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 48,\n    columnNumber: 5\n  }, this);\n}\n_s(StudentHome, \"ElJHW69O8NstWSMWJCU7ajZFmtI=\");\n_c = StudentHome;\nexport default StudentHome;\nvar _c;\n$RefreshReg$(_c, \"StudentHome\");","map":{"version":3,"names":["React","useRef","useState","useEffect","Webcam","jsQR","jsxDEV","_jsxDEV","StudentHome","_s","webcamRef","scanResults","setScanResults","interval","setInterval","capture","clearInterval","imageSrc","current","getScreenshot","code","decodeQRFromImage","prevResults","data","canvas","document","createElement","ctx","getContext","image","Image","src","onload","width","height","drawImage","imageData","getImageData","inversionAttempts","style","position","children","className","audio","ref","screenshotFormat","fileName","_jsxFileName","lineNumber","columnNumber","map","result","index","_c","$RefreshReg$"],"sources":["/Users/justin/Desktop/Work/Zerver/my_app/src/StudentHome.js"],"sourcesContent":["import React, { useRef, useState, useEffect } from \"react\";\nimport Webcam from \"react-webcam\";\nimport jsQR from \"jsqr\";\n\nfunction StudentHome() {\n  const webcamRef = useRef(null);\n  const [scanResults, setScanResults] = useState([]);\n\n  useEffect(() => {\n    const interval = setInterval(() => {\n      capture();\n    }, 1000); // continuously capture every 1000 milliseconds (1 second)\n\n    return () => clearInterval(interval); // Clear the interval when the component unmounts\n  }, []);\n\n  const capture = () => {\n    const imageSrc = webcamRef.current.getScreenshot();\n    if (imageSrc) {\n      const code = decodeQRFromImage(imageSrc);\n      if (code) {\n        // add new result to the scan results array only when a QR code is detected\n        setScanResults((prevResults) => [\n          ...prevResults,\n          `QR Code Detected: ${code.data}`,\n        ]);\n      }\n    }\n  };\n\n  const decodeQRFromImage = (imageSrc) => {\n    const canvas = document.createElement(\"canvas\");\n    const ctx = canvas.getContext(\"2d\");\n    const image = new Image();\n    image.src = imageSrc;\n    image.onload = () => {\n      canvas.width = image.width;\n      canvas.height = image.height;\n      ctx.drawImage(image, 0, 0, canvas.width, canvas.height);\n      const imageData = ctx.getImageData(0, 0, canvas.width, canvas.height);\n      return jsQR(imageData.data, imageData.width, imageData.height, {\n        inversionAttempts: \"dontInvert\",\n      });\n    };\n  };\n\n  return (\n    <div style={{ position: \"relative\" }}>\n      <Webcam\n        className=\"webcam\"\n        audio={false}\n        ref={webcamRef}\n        screenshotFormat=\"image/jpeg\"\n      />\n      <div>\n        {scanResults.map((result, index) => (\n          <p key={index}>{result}</p> // display successful QR code detection\n        ))}\n      </div>\n    </div>\n  );\n}\n\nexport default StudentHome;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}