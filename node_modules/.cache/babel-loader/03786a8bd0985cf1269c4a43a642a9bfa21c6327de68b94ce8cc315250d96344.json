{"ast":null,"code":"var _jsxFileName = \"/Users/justin/Desktop/Work/Zerver/my_app/src/StudentHome.js\",\n  _s = $RefreshSig$();\n// import React, { useRef, useState, useEffect } from \"react\";\n// import Webcam from \"react-webcam\";\n// import jsQR from \"jsqr\";\n\n// function StudentHome() {\n//   const webcamRef = useRef(null);\n//   const [scanResults, setScanResults] = useState([]);\n//   const [error, setError] = useState(\"\");\n\n//   useEffect(() => {\n//     checkPermissions();\n//     const interval = setInterval(() => {\n//       capture();\n//     }, 1000); // continuously capture every 1000 milliseconds (1 second)\n//     return () => clearInterval(interval); // Clear the interval when the component unmounts\n//   }, []);\n\n//   // Check for camera access permissions and handle errors\n//   const checkPermissions = async () => {\n//     try {\n//       await navigator.mediaDevices.getUserMedia({ video: true });\n//       // permissions granted\n//       setError(\"\");\n//     } catch (err) {\n//       console.error(\"Error accessing the camera: \", err);\n//       setError(\n//         \"Camera access was denied. Please allow camera permissions in your browser settings.\"\n//       );\n//     }\n//   };\n\n//   const capture = () => {\n//     const imageSrc = webcamRef.current.getScreenshot();\n//     if (imageSrc) {\n//       decodeQRFromImage(imageSrc);\n//     }\n//   };\n\n//   const decodeQRFromImage = (imageSrc) => {\n//     const canvas = document.createElement(\"canvas\");\n//     const ctx = canvas.getContext(\"2d\");\n//     const image = new Image();\n//     image.src = imageSrc;\n//     image.onload = () => {\n//       canvas.width = image.width;\n//       canvas.height = image.height;\n//       ctx.drawImage(image, 0, 0, canvas.width, canvas.height);\n//       const imageData = ctx.getImageData(0, 0, canvas.width, canvas.height);\n//       const code = jsQR(imageData.data, imageData.width, imageData.height, {\n//         inversionAttempts: \"dontInvert\",\n//       });\n//       if (code) {\n//         setScanResults((prevResults) => [\n//           ...prevResults,\n//           `QR Code Detected: ${code.data}`,\n//         ]);\n//       }\n//     };\n//   };\n\n//   return (\n//     <div style={{ position: \"relative\" }}>\n//       {error ? (\n//         <div className=\"error\">{error}</div>\n//       ) : (\n//         <Webcam\n//           className=\"webcam\"\n//           audio={false}\n//           ref={webcamRef}\n//           screenshotFormat=\"image/jpeg\"\n//           videoConstraints={{\n//             //determine whether on mobile or laptop for camera selection\n//             facingMode:\n//               window.innerWidth < 768 ? { exact: \"environment\" } : \"user\",\n//           }}\n//         />\n//       )}\n//       <div>\n//         {scanResults.map((result, index) => (\n//           <p key={index}>{result}</p> // Display each successful QR code detection\n//         ))}\n//       </div>\n//     </div>\n//   );\n// }\n\n// export default StudentHome;\n\nimport React, { useRef, useState, useEffect } from \"react\";\nimport Webcam from \"react-webcam-pro\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction StudentHome() {\n  _s();\n  const webcamRef = useRef(null);\n  const [error, setError] = useState(\"\");\n  const [deviceInfo, setDeviceInfo] = useState(\"\"); // For storing device camera info\n\n  useEffect(() => {\n    checkPermissions();\n  }, []);\n  const checkPermissions = async () => {\n    try {\n      const stream = await navigator.mediaDevices.getUserMedia({\n        video: true\n      });\n      // Log available devices\n      navigator.mediaDevices.enumerateDevices().then(devices => {\n        const videoDevices = devices.filter(device => device.kind === \"videoinput\");\n        setDeviceInfo(videoDevices.map(device => device.label).join(\", \"));\n      });\n      setError(\"\"); // Clear any previous errors\n      // Set stream to test direct streaming without react-webcam\n      if (webcamRef.current) {\n        webcamRef.current.srcObject = stream;\n      }\n    } catch (err) {\n      console.error(\"Error accessing the camera: \", err);\n      setError(\"Camera access was denied or not available. Check camera permissions and device settings.\");\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      position: \"relative\"\n    },\n    children: [error && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"error\",\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 17\n    }, this), !error && /*#__PURE__*/_jsxDEV(Webcam, {\n      className: \"webcam\",\n      audio: false,\n      ref: webcamRef,\n      screenshotFormat: \"image/jpeg\",\n      videoConstraints: {\n        facingMode: window.innerWidth < 768 ? {\n          exact: \"environment\"\n        } : \"user\"\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 9\n    }, this), deviceInfo && /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Detected Video Input Devices: \", deviceInfo]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 139,\n      columnNumber: 22\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 125,\n    columnNumber: 5\n  }, this);\n}\n_s(StudentHome, \"MzuqXCnZif0SsLQcI6EDDXgBjtc=\");\n_c = StudentHome;\nexport default StudentHome;\nvar _c;\n$RefreshReg$(_c, \"StudentHome\");","map":{"version":3,"names":["React","useRef","useState","useEffect","Webcam","jsxDEV","_jsxDEV","StudentHome","_s","webcamRef","error","setError","deviceInfo","setDeviceInfo","checkPermissions","stream","navigator","mediaDevices","getUserMedia","video","enumerateDevices","then","devices","videoDevices","filter","device","kind","map","label","join","current","srcObject","err","console","style","position","children","className","fileName","_jsxFileName","lineNumber","columnNumber","audio","ref","screenshotFormat","videoConstraints","facingMode","window","innerWidth","exact","_c","$RefreshReg$"],"sources":["/Users/justin/Desktop/Work/Zerver/my_app/src/StudentHome.js"],"sourcesContent":["// import React, { useRef, useState, useEffect } from \"react\";\n// import Webcam from \"react-webcam\";\n// import jsQR from \"jsqr\";\n\n// function StudentHome() {\n//   const webcamRef = useRef(null);\n//   const [scanResults, setScanResults] = useState([]);\n//   const [error, setError] = useState(\"\");\n\n//   useEffect(() => {\n//     checkPermissions();\n//     const interval = setInterval(() => {\n//       capture();\n//     }, 1000); // continuously capture every 1000 milliseconds (1 second)\n//     return () => clearInterval(interval); // Clear the interval when the component unmounts\n//   }, []);\n\n//   // Check for camera access permissions and handle errors\n//   const checkPermissions = async () => {\n//     try {\n//       await navigator.mediaDevices.getUserMedia({ video: true });\n//       // permissions granted\n//       setError(\"\");\n//     } catch (err) {\n//       console.error(\"Error accessing the camera: \", err);\n//       setError(\n//         \"Camera access was denied. Please allow camera permissions in your browser settings.\"\n//       );\n//     }\n//   };\n\n//   const capture = () => {\n//     const imageSrc = webcamRef.current.getScreenshot();\n//     if (imageSrc) {\n//       decodeQRFromImage(imageSrc);\n//     }\n//   };\n\n//   const decodeQRFromImage = (imageSrc) => {\n//     const canvas = document.createElement(\"canvas\");\n//     const ctx = canvas.getContext(\"2d\");\n//     const image = new Image();\n//     image.src = imageSrc;\n//     image.onload = () => {\n//       canvas.width = image.width;\n//       canvas.height = image.height;\n//       ctx.drawImage(image, 0, 0, canvas.width, canvas.height);\n//       const imageData = ctx.getImageData(0, 0, canvas.width, canvas.height);\n//       const code = jsQR(imageData.data, imageData.width, imageData.height, {\n//         inversionAttempts: \"dontInvert\",\n//       });\n//       if (code) {\n//         setScanResults((prevResults) => [\n//           ...prevResults,\n//           `QR Code Detected: ${code.data}`,\n//         ]);\n//       }\n//     };\n//   };\n\n//   return (\n//     <div style={{ position: \"relative\" }}>\n//       {error ? (\n//         <div className=\"error\">{error}</div>\n//       ) : (\n//         <Webcam\n//           className=\"webcam\"\n//           audio={false}\n//           ref={webcamRef}\n//           screenshotFormat=\"image/jpeg\"\n//           videoConstraints={{\n//             //determine whether on mobile or laptop for camera selection\n//             facingMode:\n//               window.innerWidth < 768 ? { exact: \"environment\" } : \"user\",\n//           }}\n//         />\n//       )}\n//       <div>\n//         {scanResults.map((result, index) => (\n//           <p key={index}>{result}</p> // Display each successful QR code detection\n//         ))}\n//       </div>\n//     </div>\n//   );\n// }\n\n// export default StudentHome;\n\nimport React, { useRef, useState, useEffect } from \"react\";\nimport Webcam from \"react-webcam-pro\";\n\nfunction StudentHome() {\n  const webcamRef = useRef(null);\n  const [error, setError] = useState(\"\");\n  const [deviceInfo, setDeviceInfo] = useState(\"\"); // For storing device camera info\n\n  useEffect(() => {\n    checkPermissions();\n  }, []);\n\n  const checkPermissions = async () => {\n    try {\n      const stream = await navigator.mediaDevices.getUserMedia({ video: true });\n      // Log available devices\n      navigator.mediaDevices.enumerateDevices().then((devices) => {\n        const videoDevices = devices.filter(\n          (device) => device.kind === \"videoinput\"\n        );\n        setDeviceInfo(videoDevices.map((device) => device.label).join(\", \"));\n      });\n      setError(\"\"); // Clear any previous errors\n      // Set stream to test direct streaming without react-webcam\n      if (webcamRef.current) {\n        webcamRef.current.srcObject = stream;\n      }\n    } catch (err) {\n      console.error(\"Error accessing the camera: \", err);\n      setError(\n        \"Camera access was denied or not available. Check camera permissions and device settings.\"\n      );\n    }\n  };\n\n  return (\n    <div style={{ position: \"relative\" }}>\n      {error && <div className=\"error\">{error}</div>}\n      {!error && (\n        <Webcam\n          className=\"webcam\"\n          audio={false}\n          ref={webcamRef}\n          screenshotFormat=\"image/jpeg\"\n          videoConstraints={{\n            facingMode:\n              window.innerWidth < 768 ? { exact: \"environment\" } : \"user\",\n          }}\n        />\n      )}\n      {deviceInfo && <p>Detected Video Input Devices: {deviceInfo}</p>}\n    </div>\n  );\n}\n\nexport default StudentHome;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}